name: SampleWorkflow
on: 
  push: 
    branches:  [main]
jobs: 
  CheckPaclet: 
    name: CheckPaclet
    runs-on: ubuntu-latest
    container: 
      image: wolframresearch/wolframengine:latest
      options: --user root
    env: 
      WOLFRAM_SYSTEM_ID: Linux-x86-64
      WOLFRAMSCRIPT_ENTITLEMENTID: ${{ secrets.WOLFRAMSCRIPT_ENTITLEMENTID }}
    steps: 
    - name: Checkout
      id: checkout-code-step
      uses: actions/checkout@v2
    - name: UntitledCommand
      run: mkdir LibraryResources
    - name: Check
      id: check-paclet-step
      uses: rhennigan/check-paclet@v1.4.0
      with: 
        target: Submit
        paclet_cicd_version: 0.7.0
        definition_notebook: ./DefinitionNotebook.nb
    timeout-minutes: 5
  Compile-Linux: 
    name: Compile-Linux
    runs-on: ubuntu-latest
    container: 
      image: wolframresearch/wolframengine:latest
      options: --user root
    env: 
      WOLFRAM_SYSTEM_ID: Linux-x86-64
      WOLFRAMSCRIPT_ENTITLEMENTID: ${{ secrets.WOLFRAMSCRIPT_ENTITLEMENTID }}
    steps: 
    - name: Checkout
      id: checkout-code-step
      uses: actions/checkout@v2
    - name: InstallBuildTools
      run: apt-get -y update && apt-get -y install build-essential
    - name: Compile
      run: wolframscript Scripts/Compile.wls
    - with: 
        path: LibraryResources/Linux-x86-64
        if-no-files-found: error
        name: Linux-x86-64
      name: Upload
      id: upload-artifacts-step
      uses: actions/upload-artifact@v2
    timeout-minutes: 5
    needs:  [CheckPaclet]
  Compile-Windows: 
    name: Compile-Windows
    runs-on: windows-latest
    env: 
      WOLFRAM_SYSTEM_ID: Windows-x86-64
      WOLFRAMSCRIPT_ENTITLEMENTID: ${{ secrets.WOLFRAMSCRIPT_ENTITLEMENTID }}
      WOLFRAMENGINE_INSTALL_MSI_DOWNLOAD_URL: https://files.wolframcdn.com/packages/winget/13.0.0.0/WolframEngine_13.0.0_WIN.msi
      WOLFRAMENGINE_CACHE_KEY: WolframEngine-A
    steps: 
    - name: Checkout
      id: checkout-code-step
      uses: actions/checkout@v2
    - name: RestoreCachedWolframEngine
      id: cache-restore-step
      uses: actions/cache@v2
      env: 
        WOLFRAMENGINE_INSTALLATION_DIRECTORY: '${{ runner.temp }}\WolframEngine'
      with: 
        path: ${{ env.WOLFRAMENGINE_INSTALLATION_DIRECTORY }}
        key: wolframengine-${{ env.WOLFRAM_SYSTEM_ID }}-${{ env.WOLFRAMENGINE_CACHE_KEY }}
    - name: InstallWolframEngine
      if: steps.cache-restore-step.outputs.cache-hit != 'true'
      env: 
        WOLFRAMENGINE_INSTALLATION_DIRECTORY: '${{ runner.temp }}\WolframEngine'
        WOLFRAMENGINE_INSTALL_MSI_PATH: '${{ runner.temp }}\WolframEngine-Install.msi'
        WOLFRAMENGINE_INSTALL_LOG_PATH: '${{ runner.temp }}\WolframEngine-Install.log'
      run: |
        echo 'Downloading Wolfram Engine installer...'
        $msiFile = '${{ env.WOLFRAMENGINE_INSTALL_MSI_PATH }}'
        $logFile = '${{ env.WOLFRAMENGINE_INSTALL_LOG_PATH }}'
        Import-Module BitsTransfer
        Start-BitsTransfer '${{ env.WOLFRAMENGINE_INSTALL_MSI_DOWNLOAD_URL }}' $msiFile
        echo 'Downloaded Wolfram Engine installer.'
        $DataStamp = get-date -Format yyyyMMddTHHmmss
        $MSIArguments = @(
            "/i"
            ('"{0}"' -f $msiFile)
            'INSTALLLOCATION="${{ env.WOLFRAMENGINE_INSTALLATION_DIRECTORY }}"'
            "/qn"
            "/norestart"
            "/L*v"
            $logFile
        )
        echo 'Installing Wolfram Engine...'
        Start-Process "msiexec.exe" -ArgumentList $MSIArguments -Wait -NoNewWindow
        echo 'Installed Wolfram Engine.'
        Set-Alias -Name wolframscript -Value wolfram
    - name: Compile
      run: |
        $env:Path += ';${{ env.WOLFRAMENGINE_INSTALLATION_DIRECTORY }}\'
        wolfram -script Scripts/Compile.wls
      env: 
        WOLFRAMENGINE_INSTALLATION_DIRECTORY: '${{ runner.temp }}\WolframEngine'
        WOLFRAMINIT: "-pwfile !cloudlm.wolfram.com -entitlement ${{ secrets.WOLFRAMSCRIPT_ENTITLEMENTID }}"
    - with: 
        path: LibraryResources/Windows-x86-64
        if-no-files-found: error
        name: Windows-x86-64
      name: Upload
      id: upload-artifacts-step
      uses: actions/upload-artifact@v2
    timeout-minutes: 15
    needs:  [CheckPaclet]
  Compile-MacOSX: 
    name: Compile-MacOSX
    runs-on: macos-latest
    env: 
      WOLFRAM_SYSTEM_ID: MacOSX-x86-64
      WOLFRAMSCRIPT_ENTITLEMENTID: ${{ secrets.WOLFRAMSCRIPT_ENTITLEMENTID }}
      WOLFRAMENGINE_CACHE_KEY: WolframEngine-A
      WOLFRAMENGINE_INSTALLATION_DIRECTORY: "/Applications/Wolfram Engine.app"
    steps: 
    - name: Checkout
      id: checkout-code-step
      uses: actions/checkout@v2
    - name: RestoreCachedWolframEngine
      id: cache-restore-step
      uses: actions/cache@v2
      with: 
        path: ${{ env.WOLFRAMENGINE_INSTALLATION_DIRECTORY }}
        key: wolframengine-${{ env.WOLFRAM_SYSTEM_ID }}-${{ env.WOLFRAMENGINE_CACHE_KEY }}
    - name: InstallWolframEngine
      if: steps.cache-restore-step.outputs.cache-hit != 'true'
      run: |
        echo 'Installing Wolfram Engine...'
        brew install --cask wolfram-engine
        echo 'Installed Wolfram Engine.'
    - name: Compile
      run: |
        export PATH="${{ env.WOLFRAMENGINE_EXECUTABLES_DIRECTORY }}:$PATH"
        wolframscript -debug -verbose -script Scripts/Compile.wls
      env: 
        WOLFRAMENGINE_EXECUTABLES_DIRECTORY: "${{ env.WOLFRAMENGINE_INSTALLATION_DIRECTORY }}/Contents/Resources/Wolfram Player.app/Contents/MacOS"
        WOLFRAMSCRIPT_KERNELPATH: "${{ env.WOLFRAMENGINE_INSTALLATION_DIRECTORY }}/Contents/MacOS/WolframKernel"
    - with: 
        path: LibraryResources/MacOSX-x86-64
        if-no-files-found: error
        name: MacOSX-x86-64
      name: Upload
      id: upload-artifacts-step
      uses: actions/upload-artifact@v2
    timeout-minutes: 15
    needs:  [CheckPaclet]
  TestPaclet: 
    name: TestPaclet
    runs-on: ubuntu-latest
    container: 
      image: wolframresearch/wolframengine:latest
      options: --user root
    env: 
      WOLFRAM_SYSTEM_ID: Linux-x86-64
      WOLFRAMSCRIPT_ENTITLEMENTID: ${{ secrets.WOLFRAMSCRIPT_ENTITLEMENTID }}
    steps: 
    - name: Checkout
      id: checkout-code-step
      uses: actions/checkout@v2
    - with: 
        path: LibraryResources
      name: Download
      id: download-artifacts-step
      uses: actions/download-artifact@v2
    - name: Test
      id: test-paclet-step
      uses: rhennigan/test-paclet@v1.0.0
      with: 
        target: Submit
        paclet_cicd_version: 0.7.0
        definition_notebook: ./DefinitionNotebook.nb
    timeout-minutes: 5
    needs:  [Compile-Linux, Compile-Windows, Compile-MacOSX]
  BuildPaclet: 
    name: BuildPaclet
    runs-on: ubuntu-latest
    container: 
      image: wolframresearch/wolframengine:latest
      options: --user root
    env: 
      WOLFRAM_SYSTEM_ID: Linux-x86-64
      WOLFRAMSCRIPT_ENTITLEMENTID: ${{ secrets.WOLFRAMSCRIPT_ENTITLEMENTID }}
    steps: 
    - name: Checkout
      id: checkout-code-step
      uses: actions/checkout@v2
    - with: 
        path: LibraryResources
      name: Download
      id: download-artifacts-step
      uses: actions/download-artifact@v2
    - name: SetBuildDate
      run: wolframscript Scripts/SetBuildDate.wls
    - name: Build
      id: build-paclet-step
      uses: rhennigan/build-paclet@v1.4.0
      with: 
        target: Submit
        paclet_cicd_version: 0.7.0
        definition_notebook: ./DefinitionNotebook.nb
    - with: 
        path: build
        if-no-files-found: error
      name: Upload
      id: upload-artifacts-step
      uses: actions/upload-artifact@v2
    timeout-minutes: 15
    needs:  [TestPaclet]